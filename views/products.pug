extends layout
include mixins/mixins

block content
    // Alert for messages
    div#messageAlert.alert.alert-dismissible.fade(role="alert" style="display: none;")
        span#messageText
        button.close(type="button" data-dismiss="alert" aria-label="Close")
            span(aria-hidden="true") &times;
    
    // Mobile-first: Sticky header for products table
    .products-header-sticky
        .container-fluid
            .row.align-items-center.py-2
                .col-auto
                    h4.mb-0.text-primary Products Management
                .col.text-right
                    .btn-group
                        button.btn.btn-success.btn-sm#addProductBtn(type="button", data-toggle="modal", data-target="#addProductModal")
                            i.bi.bi-plus-circle.me-1
                            span.d-none.d-sm-inline Add Product
                            span.d-inline.d-sm-none Add
                        button.btn.btn-info.btn-sm#refreshDataBtn(type="button")
                            i.bi.bi-arrow-clockwise.me-1
                            span.d-none.d-sm-inline Refresh
                            span.d-inline.d-sm-none Refresh

    // Products content with responsive design
    .products-container
        // Desktop table view
        .desktop-table-view.d-none.d-lg-block
            .table-responsive
                table.table.table-hover.table-striped(id="product-master-table")
                    thead.thead-dark.sticky-top
                        tr
                            th(scope="col") #
                            th(scope="col") Product
                            th(scope="col") SKU Name
                            th(scope="col") SKU Number
                            th(scope="col") HSN Code
                            th(scope="col") Unit
                            th(scope="col") Price
                            th(scope="col") Ledger Name
                            th(scope="col") CGST%
                            th(scope="col") SGST%
                            th(scope="col") Edit
                    tbody
                        each val, index in products
                            tr(id=`product-row-${index}`)
                                th(scope="row")= index + 1
                                td(scope="row")
                                    strong= val.name
                                td(scope="row")
                                    input.form-control.form-control-sm.text-uppercase(
                                        type="text", 
                                        id=`product-sku-name-${index}`, 
                                        value=val.sku_name, 
                                        readonly,
                                        style="text-transform: uppercase;"
                                    )
                                td(scope="row")
                                    input.form-control.form-control-sm.text-uppercase(
                                        type="text", 
                                        id=`product-sku-number-${index}`, 
                                        value=val.sku_number, 
                                        readonly,
                                        style="text-transform: uppercase;"
                                    )
                                td(scope="row")
                                    input.form-control.form-control-sm.text-uppercase(
                                        type="text", 
                                        id=`product-hsn-code-${index}`, 
                                        value=val.hsn_code, 
                                        readonly,
                                        style="text-transform: uppercase;"
                                    )
                                td(scope="row")
                                    input.form-control.form-control-sm.text-uppercase(
                                        type="text", 
                                        id=`product-unit-${index}`, 
                                        value=val.unit, 
                                        readonly,
                                        style="text-transform: uppercase;"
                                    )
                                td(scope="row")
                                    .input-group.input-group-sm
                                        .input-group-prepend
                                            span.input-group-text â‚¹
                                        input.form-control(
                                            type="number", 
                                            id=`product-price-${index}`, 
                                            value=val.price, 
                                            readonly, 
                                            step=0.01
                                        )
                                td(scope="row")
                                    input.form-control.form-control-sm.text-uppercase(
                                        type="text", 
                                        id=`product-ledger-name-${index}`, 
                                        value=val.ledger_name, 
                                        readonly,
                                        style="text-transform: uppercase;"
                                    )
                                td(scope="row")
                                    .input-group.input-group-sm
                                        input.form-control(
                                            type="number", 
                                            id=`product-cgst-${index}`, 
                                            value=val.cgst_percent, 
                                            readonly, 
                                            step=0.01
                                        )
                                        .input-group-append
                                            span.input-group-text %
                                td(scope="row")
                                    .input-group.input-group-sm
                                        input.form-control(
                                            type="number", 
                                            id=`product-sgst-${index}`, 
                                            value=val.sgst_percent, 
                                            readonly, 
                                            step=0.01
                                        )
                                        .input-group-append
                                            span.input-group-text %
                                td(scope="row")
                                    button.btn.btn-primary.btn-sm(
                                        type="button", 
                                        onclick=`editProduct(${index}, ${val.id})`
                                    )
                                        i.bi.bi-pencil

        // Mobile cards view
        .mobile-cards-view.d-block.d-lg-none
            .row
                each val, index in products
                    .col-12.mb-3
                        .card.product-card.shadow-sm(id=`mobile-product-card-${index}`)
                            .card-header.d-flex.justify-content-between.align-items-center
                                .product-name
                                    strong= val.name
                                .product-actions
                                    button.btn.btn-primary.btn-sm(
                                        type="button", 
                                        onclick=`editProductMobile(${index}, ${val.id})`
                                    )
                                        i.bi.bi-pencil
                            .card-body.p-3
                                .row.g-2
                                    .col-6
                                        .product-detail
                                            small.text-muted SKU Name
                                            input.mobile-input.fw-bold(
                                                type="text",
                                                id=`mobile-sku-name-${index}`,
                                                value=val.sku_name || 'N/A',
                                                readonly,
                                                style="border: none; background: transparent; padding: 0; font-weight: bold;"
                                            )
                                    .col-6
                                        .product-detail
                                            small.text-muted SKU Number
                                            input.mobile-input.fw-bold(
                                                type="text",
                                                id=`mobile-sku-number-${index}`,
                                                value=val.sku_number || 'N/A',
                                                readonly,
                                                style="border: none; background: transparent; padding: 0; font-weight: bold;"
                                            )
                                    .col-6
                                        .product-detail
                                            small.text-muted HSN Code
                                            input.mobile-input.fw-bold(
                                                type="text",
                                                id=`mobile-hsn-code-${index}`,
                                                value=val.hsn_code || 'N/A',
                                                readonly,
                                                style="border: none; background: transparent; padding: 0; font-weight: bold;"
                                            )
                                    .col-6
                                        .product-detail
                                            small.text-muted Unit
                                            input.mobile-input.fw-bold.text-uppercase(
                                                type="text",
                                                id=`mobile-unit-${index}`,
                                                value=val.unit || 'N/A',
                                                readonly,
                                                style="border: none; background: transparent; padding: 0; font-weight: bold; text-transform: uppercase;"
                                            )
                                    .col-6
                                        .product-detail
                                            small.text-muted Price
                                            .input-group.input-group-sm
                                                .input-group-prepend
                                                    span.input-group-text.mobile-currency â‚¹
                                                input.mobile-input.fw-bold.text-success(
                                                    type="number",
                                                    id=`mobile-price-${index}`,
                                                    value=val.price,
                                                    readonly,
                                                    step="0.01",
                                                    style="border: 1px solid #dee2e6; background: white; padding: 4px 8px; font-weight: bold;"
                                                )
                                    .col-6
                                        .product-detail
                                            small.text-muted Ledger
                                            input.mobile-input.fw-bold.text-uppercase(
                                                type="text",
                                                id=`mobile-ledger-${index}`,
                                                value=val.ledger_name || 'N/A',
                                                readonly,
                                                style="border: none; background: transparent; padding: 0; font-weight: bold; text-transform: uppercase;"
                                            )
                                    .col-6
                                        .product-detail
                                            small.text-muted CGST
                                            .input-group.input-group-sm
                                                input.mobile-input.fw-bold(
                                                    type="number",
                                                    id=`mobile-cgst-${index}`,
                                                    value=val.cgst_percent,
                                                    readonly,
                                                    step="0.01",
                                                    style="border: 1px solid #dee2e6; background: white; padding: 4px 8px; font-weight: bold;"
                                                )
                                                .input-group-append
                                                    span.input-group-text %
                                    .col-6
                                        .product-detail
                                            small.text-muted SGST
                                            .input-group.input-group-sm
                                                input.mobile-input.fw-bold(
                                                    type="number",
                                                    id=`mobile-sgst-${index}`,
                                                    value=val.sgst_percent,
                                                    readonly,
                                                    step="0.01",
                                                    style="border: 1px solid #dee2e6; background: white; padding: 4px 8px; font-weight: bold;"
                                                )
                                                .input-group-append
                                                    span.input-group-text %

    // Add Product Modal
    .modal.fade#addProductModal(tabindex="-1", role="dialog", aria-labelledby="addProductModalLabel", aria-hidden="true")
        .modal-dialog.modal-lg(role="document")
            .modal-content
                .modal-header
                    h5.modal-title#addProductModalLabel Add New Product
                    button.close(type="button", data-dismiss="modal", aria-label="Close")
                        span(aria-hidden="true") &times;
                .modal-body
                    form#addProductForm(method='POST', action='/products/api')
                        .row
                            .col-md-6.mb-3
                                label.form-label Product Name
                                input.form-control.text-uppercase(type="text", name="product_name", required, style="text-transform: uppercase;")
                            .col-md-6.mb-3
                                label.form-label SKU Name
                                input.form-control.text-uppercase(type="text", name="sku_name", style="text-transform: uppercase;")
                            .col-md-6.mb-3
                                label.form-label SKU Number
                                input.form-control.text-uppercase(type="text", name="sku_number", style="text-transform: uppercase;")
                            .col-md-6.mb-3
                                label.form-label HSN Code
                                input.form-control.text-uppercase(type="text", name="hsn_code", style="text-transform: uppercase;")
                            .col-md-6.mb-3
                                label.form-label Unit
                                select.form-control(name="unit", required)
                                    option(value="", disabled, selected) Select Unit
                                    option(value="NOS") NOS
                                    option(value="LIT") LIT
                            .col-md-6.mb-3
                                label.form-label Price
                                input.form-control(type="number", name="price", step="0.01", required)
                            .col-md-12.mb-3
                                label.form-label Ledger Name
                                input.form-control.text-uppercase(type="text", name="ledger_name", style="text-transform: uppercase;")
                            .col-md-6.mb-3
                                label.form-label CGST %
                                input.form-control(type="number", name="cgst_percent", step="0.01", min="0", max="100")
                            .col-md-6.mb-3
                                label.form-label SGST %
                                input.form-control(type="number", name="sgst_percent", step="0.01", min="0", max="100")
                .modal-footer
                    button.btn.btn-secondary(type="button", data-dismiss="modal") Cancel
                                            button.btn.btn-success(type="submit", form="addProductForm") Add Product

        // End of main-content wrapper
    
    // CSS for mobile responsiveness and sticky header
    style.
        .products-header-sticky {
            position: sticky;
            top: 0;
            z-index: 1020;
            background: white;
            border-bottom: 2px solid #dee2e6;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-left: 0;
            margin-right: 0;
        }
        
        .products-container {
            padding-top: 15px;
        }
        
        /* Fix for sidebar layout - ensure header doesn't overlap menu */
        @media (min-width: 992px) {
            .products-header-sticky {
                margin-left: 260px;
            }
        }
        
        /* Mobile header adjustments */
        @media (max-width: 991.98px) {
            .products-header-sticky {
                margin-left: 0;
            }
            
            .products-header-sticky h4 {
                font-size: 18px;
            }
            
            .products-header-sticky .btn {
                font-size: 12px;
                padding: 6px 10px;
            }
        }
        
        /* Button spacing and mobile adjustments */
        .me-2 {
            margin-right: 0.5rem !important;
        }
        
        .ms-1 {
            margin-left: 0.25rem !important;
        }
        
        .product-card {
            border-radius: 12px;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        
        .product-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15) !important;
        }
        
        .product-card .card-header {
            background: linear-gradient(45deg, #007bff, #0056b3);
            color: white;
            border-radius: 12px 12px 0 0;
            padding: 12px 16px;
        }
        
        .product-name {
            font-size: 16px;
            font-weight: 600;
        }
        
        .product-detail {
            margin-bottom: 8px;
        }
        
        .product-detail small {
            display: block;
            font-size: 11px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 2px;
        }
        
        @media (max-width: 991.98px) {
            .desktop-table-view {
                display: none !important;
            }
            
            .mobile-cards-view {
                display: block !important;
            }
        }
        
        @media (min-width: 992px) {
            .desktop-table-view {
                display: block !important;
            }
            
            .mobile-cards-view {
                display: none !important;
            }
        }
        
        /* Sticky table header for desktop */
        .table-responsive {
            max-height: calc(100vh - 200px);
            overflow-y: auto;
        }
        
        .sticky-top {
            position: sticky;
            top: 0;
            z-index: 10;
        }
        
        /* Mobile input styling */
        .mobile-input:focus {
            outline: none;
            border-color: #007bff !important;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25) !important;
        }
        
        .mobile-input.editable {
            border: 1px solid #007bff !important;
            background: #f8f9fa !important;
            padding: 4px 8px !important;
            border-radius: 4px;
        }
        
        .mobile-currency {
            font-size: 12px;
            padding: 4px 6px;
        }

    // JavaScript for product management
    script.
        // Auto-uppercase function for text inputs
        function makeUppercase(input) {
            input.value = input.value.toUpperCase();
        }
        
        function editProduct(index, productId) {
            // Enable editing for the specific product row
            const row = document.getElementById(`product-row-${index}`);
            const inputs = row.querySelectorAll('input[readonly]');
            
            inputs.forEach(input => {
                if (!input.id.includes('sku-name') && !input.id.includes('sku-number') && !input.id.includes('hsn-code')) {
                    input.removeAttribute('readonly');
                    input.classList.add('bg-light');
                    
                    // Add uppercase input listener for text fields
                    if (input.type === 'text') {
                        input.addEventListener('input', function() {
                            makeUppercase(this);
                        });
                    }
                }
            });
            
            // Change edit button to save button
            const editBtn = row.querySelector('button');
            editBtn.innerHTML = '<i class="bi bi-check"></i>';
            editBtn.classList.remove('btn-primary');
            editBtn.classList.add('btn-success');
            editBtn.setAttribute('onclick', `saveProduct(${index}, ${productId})`);
        }
        
        function editProductMobile(index, productId) {
            // Enable editing for mobile card inputs
            const card = document.getElementById(`mobile-product-card-${index}`);
            const inputs = card.querySelectorAll('input[readonly]');
            
            inputs.forEach(input => {
                if (!input.id.includes('sku-name') && !input.id.includes('sku-number') && !input.id.includes('hsn-code')) {
                    input.removeAttribute('readonly');
                    input.classList.add('editable');
                    
                    // Add uppercase input listener for text fields
                    if (input.type === 'text') {
                        input.addEventListener('input', function() {
                            makeUppercase(this);
                        });
                    }
                }
            });
            
            // Change edit button to save button
            const editBtn = card.querySelector('button');
            editBtn.innerHTML = '<i class="bi bi-check"></i>';
            editBtn.classList.remove('btn-primary');
            editBtn.classList.add('btn-success');
            editBtn.setAttribute('onclick', `saveProductMobile(${index}, ${productId})`);
        }
        
        function saveProductMobile(index, productId) {
            const updateData = {
                m_product_price: document.getElementById(`mobile-price-${index}`).value,
                m_product_unit: document.getElementById(`mobile-unit-${index}`).value.toUpperCase(),
                m_product_ledger_name: document.getElementById(`mobile-ledger-${index}`).value.toUpperCase(),
                m_product_cgst: document.getElementById(`mobile-cgst-${index}`).value,
                m_product_sgst: document.getElementById(`mobile-sgst-${index}`).value
            };
            
            fetch(`/products/api/${productId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updateData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage('Product updated successfully', 'success');
                    // Reset mobile card to readonly state
                    const card = document.getElementById(`mobile-product-card-${index}`);
                    const inputs = card.querySelectorAll('input');
                    inputs.forEach(input => {
                        input.setAttribute('readonly', true);
                        input.classList.remove('editable');
                    });
                    
                    // Change save button back to edit button
                    const saveBtn = card.querySelector('button');
                    saveBtn.innerHTML = '<i class="bi bi-pencil"></i>';
                    saveBtn.classList.remove('btn-success');
                    saveBtn.classList.add('btn-primary');
                    saveBtn.setAttribute('onclick', `editProductMobile(${index}, ${productId})`);
                } else {
                    showMessage('Error updating product: ' + data.error, 'danger');
                }
            })
            .catch(error => {
                showMessage('Error updating product: ' + error.message, 'danger');
            });
        }
        
        function saveProduct(index, productId) {
            const row = document.getElementById(`product-row-${index}`);
            
            const updateData = {
                m_product_price: document.getElementById(`product-price-${index}`).value,
                m_product_unit: document.getElementById(`product-unit-${index}`).value.toUpperCase(),
                m_product_ledger_name: document.getElementById(`product-ledger-name-${index}`).value.toUpperCase(),
                m_product_cgst: document.getElementById(`product-cgst-${index}`).value,
                m_product_sgst: document.getElementById(`product-sgst-${index}`).value
            };
            
            fetch(`/products/api/${productId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updateData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showMessage('Product updated successfully', 'success');
                    // Reset the row to readonly state
                    const inputs = row.querySelectorAll('input');
                    inputs.forEach(input => {
                        input.setAttribute('readonly', true);
                        input.classList.remove('bg-light');
                    });
                    
                    // Change save button back to edit button
                    const saveBtn = row.querySelector('button');
                    saveBtn.innerHTML = '<i class="bi bi-pencil"></i>';
                    saveBtn.classList.remove('btn-success');
                    saveBtn.classList.add('btn-primary');
                    saveBtn.setAttribute('onclick', `editProduct(${index}, ${productId})`);
                } else {
                    showMessage('Error updating product: ' + data.error, 'danger');
                }
            })
            .catch(error => {
                showMessage('Error updating product: ' + error.message, 'danger');
            });
        }
        
        function refreshData() {
            location.reload();
        }
        
        function showMessage(message, type) {
            const alertDiv = document.getElementById('messageAlert');
            const messageText = document.getElementById('messageText');
            
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            messageText.textContent = message;
            alertDiv.style.display = 'block';
            
            setTimeout(() => {
                alertDiv.classList.remove('show');
                setTimeout(() => {
                    alertDiv.style.display = 'none';
                }, 150);
            }, 3000);
        }
        
        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('refreshDataBtn').addEventListener('click', refreshData);
            
            // Add uppercase event listeners to all text inputs in the modal
            const textInputs = document.querySelectorAll('input[type="text"].text-uppercase');
            textInputs.forEach(input => {
                input.addEventListener('input', function() {
                    makeUppercase(this);
                });
            });
            
            // Handle form submission for new products
            document.getElementById('addProductForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                const formData = new FormData(this);
                const jsonData = {};
                
                // Convert text fields to uppercase before sending
                for (let [key, value] of formData.entries()) {
                    if (typeof value === 'string' && key !== 'price' && key !== 'cgst_percent' && key !== 'sgst_percent') {
                        jsonData[key] = value.toUpperCase();
                    } else {
                        jsonData[key] = value;
                    }
                }
                
                fetch('/products/api', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(jsonData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showMessage('Product added successfully', 'success');
                        $('#addProductModal').modal('hide');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showMessage('Error adding product: ' + data.error, 'danger');
                    }
                })
                .catch(error => {
                    showMessage('Error adding product: ' + error.message, 'danger');
                });
            });
        });