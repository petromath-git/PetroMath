extends layout

block content
    // Sticky Header Section - Contains title, button, past adjustments header, and filters
    div.sticky-header-container
        // Main Header with Add Button
        div.main-header
            div.row.mb-3
                div.col-12
                    div.d-flex.justify-content-between.align-items-center
                        h4.mb-0 Adjustment History
                        if user.Role === 'Admin' || user.Role === 'SuperUser'
                            a.btn.btn-primary(href='/adjustments/new')
                                i.bi.bi-plus-circle.me-2
                                | Add New Adjustment      
        // Filter Section - Always Expanded
        div.filter-section-expanded
            div.filter-header
                div.d-flex.align-items-center
                    i.bi.bi-funnel.me-2
                    strong Search & Filter Adjustments
            
            div.filter-content-expanded
                form#adjustmentFiltersForm
                    div.form-row
                        div.col-md-3
                            label(for='filterDateRange') Date Range
                            select.form-control#filterDateRange(onchange='updateAdjustmentDateRange()')
                                option(value='last_30_days' selected) Last 30 Days
                                option(value='this_month') This Month
                                option(value='last_month') Last Month
                                option(value='this_financial_year') This Financial Year
                                option(value='last_financial_year') Last Financial Year
                                option(value='custom') Custom Date Range
                        div.col-md-3
                            label(for='filterFromDate') From Date
                            input.form-control(type='date' id='filterFromDate' name='fromDate')
                        div.col-md-3
                            label(for='filterToDate') To Date
                            input.form-control(type='date' id='filterToDate' name='toDate')
                        div.col-md-3
                            label(for='filterAdjustmentType') Adjustment Type
                            select.form-control#filterAdjustmentType(name='adjustmentType')
                                option(value='') All Types
                                if adjustmentTypes
                                    each type in adjustmentTypes
                                        option(value=type.lookup_id)= type.description
                    
                    div.form-row.mt-3
                        div.col-md-3
                            label(for='filterAccountType') Account Type
                            select.form-control#filterAccountType(name='externalSource')
                                option(value='') All Account Types
                                option(value='CUSTOMER') Customer
                                option(value='DIGITAL_VENDOR') Digital Vendor
                                option(value='SUPPLIER') Supplier
                                option(value='BANK') Bank Account
                                option(value='EXPENSE') Expense
                        div.col-md-3
                            label(for='filterStatus') Status
                            select.form-control#filterStatus(name='status')
                                option(value='') All Status
                                option(value='ACTIVE' selected) Active
                                option(value='REVERSED') Reversed
                        div.col-md-4
                            label(for='filterSearch') Search (Reference No, Description)
                            input.form-control#filterSearch(type='text' name='search' placeholder='Enter reference number or description')
                        div.col-md-2.d-flex.align-items-end
                            button.btn.btn-primary.mr-2(type='button' onclick='applyFilters()')
                                i.bi.bi-search
                                |  Search
                            button.btn.btn-secondary(type='button' onclick='clearFilters()')
                                i.bi.bi-x-circle
                                |  Clear

        // Sticky Table Header
        div.sticky-table-header
            div.table-responsive
                table.table.table-sm.enhanced-adjustments-table.mb-0
                    thead
                        tr
                            th Date
                            th Reference
                            th.d-none.d-md-table-cell Type
                            th Description
                            th.d-none.d-md-table-cell Account
                            th.amount-column Debit
                            th.amount-column Credit
                            th.text-center Status
                            th.d-none.d-md-table-cell Created By
                            th.text-center Actions

    // Results Section - Table Body Only
    div.results-container
        div.row
            div.col-12
                div.card.borderless-card
                    div.card-body.p-0
                        // Loading Spinner
                        div.loading-spinner#loadingSpinner
                            div.spinner-border.text-primary(role='status')
                                span.sr-only Loading...
                            p.mt-2.text-muted Loading adjustments...
                        
                        // Results Table Body Only (Header is sticky above)
                        div.table-responsive#adjustmentsTableContainer
                            table.table.table-sm.enhanced-adjustments-table.mb-0#adjustmentsTable
                                tbody#adjustmentsTableBody
                                    // Results will be populated here
                        
                        // No Results Message
                        div.no-results#noResults(style='display: none;')
                            i.bi.bi-info-circle-fill.text-muted(style='font-size: 2rem;')
                            h5.mt-3 No adjustments found
                            p.text-muted Try adjusting your search criteria or date range.
                        
                        // Summary Footer
                        div.card-footer#summaryFooter(style='display: none;')
                            div.row
                                div.col-md-8
                                    small.text-muted#resultCount 0 adjustments found
                                div.col-md-4.text-right
                                    small.text-muted
                                        | Total Debits: 
                                        span.font-weight-bold#totalDebits ₹0.00
                                        |  | Total Credits: 
                                        span.font-weight-bold#totalCredits ₹0.00

    script.
        // Initialize with data from backend
        const adjustmentTypesData = !{JSON.stringify(adjustmentTypes || [])};
        const customerListData = !{JSON.stringify(customerList || [])};
        const digitalVendorListData = !{JSON.stringify(digitalVendorList || [])};
        const supplierListData = !{JSON.stringify(supplierList || [])};
        const bankListData = !{JSON.stringify(bankList || [])};
        const expenseListData = !{JSON.stringify(expenseList || [])};
        
        // Make user data available to JavaScript
        window.userData = !{JSON.stringify(user || {})};
        window.userRole = !{JSON.stringify(user.Role || '')};

        // Server date data 
        const serverDate = new Date('!{currentDate}');
        const serverYear = !{currentYear};
        const serverMonth = !{currentMonth}; // 1-based month from server

        // Enhanced Past Adjustments Functionality
        $(document).ready(function() {
            // Set default date range (last 30 days)
            updateAdjustmentDateRange();
            
            // Load initial data
            applyFilters();
        });
        
        function updateAdjustmentDateRange() {
                const dateRange = $('#filterDateRange').val();
                const today = serverDate;
                let fromDate, toDate;               
                
                
                switch(dateRange) {
                    case 'last_30_days':
                        fromDate = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));
                        toDate = today;
                        break;
                        
                    case 'this_month':
                        fromDate = new Date(serverYear, serverMonth - 1, 1);
                        toDate = today;
                        break;
                        
                    case 'last_month':
                        fromDate = new Date(serverYear, serverMonth - 2, 1);
                        toDate = new Date(serverYear, serverMonth - 1, 0);
                        break;
                        
                    case 'this_financial_year':
                        if (serverMonth >= 4) { // April onwards
                            fromDate = new Date(serverYear, 3, 1); // April 1 current year
                            toDate = today; // Should be today, not March 31!
                            console.log('FY Case: April onwards, from April 1 current year to today');
                        } else { // Jan-Mar
                            fromDate = new Date(serverYear - 1, 3, 1); // April 1 previous year
                            toDate = today; // Should be today, not March 31!
                            console.log('FY Case: Jan-Mar, from April 1 previous year to today');
                        }
                        break;
                        
                    case 'last_financial_year':
                        if (serverMonth >= 4) { // April onwards
                            fromDate = new Date(serverYear - 1, 3, 1); // April 1 previous year
                            toDate = new Date(serverYear, 2, 31); // March 31 current year
                            console.log('Last FY Case: April onwards');
                        } else { // Jan-Mar
                            fromDate = new Date(serverYear - 2, 3, 1); // April 1 two years ago
                            toDate = new Date(serverYear - 1, 2, 31); // March 31 previous year
                            console.log('Last FY Case: Jan-Mar');
                        }
                        break;
                        
                    case 'custom':
                        return;
                        
                    default:
                        fromDate = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));
                        toDate = today;
                }                
              

                function formatDateForInput(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                return `${year}-${month}-${day}`;
                 }
                
                $('#filterFromDate').val(formatDateForInput(fromDate));
                $('#filterToDate').val(formatDateForInput(toDate));
                
                const isCustom = dateRange === 'custom';
                $('#filterFromDate').prop('readonly', !isCustom);
                $('#filterToDate').prop('readonly', !isCustom);
                
                if (isCustom) {
                    $('#filterFromDate').focus();
                }
            }

        function applyFilters() {
            const formData = $('#adjustmentFiltersForm').serialize();
            
            $('#loadingSpinner').show();
            $('#adjustmentsTableContainer').hide();
            $('#noResults').hide();
            $('#summaryFooter').hide();
            
            $.ajax({
                url: '/adjustments/api/list',
                method: 'POST',
                data: formData,
                success: function(response) {
                    if (response.success) {
                        populateAdjustmentsTable(response.data);
                    } else {
                        showError('Failed to load adjustments: ' + response.error);
                    }
                },
                error: function(xhr, status, error) {
                    showError('Error loading adjustments: ' + error);
                },
                complete: function() {
                    $('#loadingSpinner').hide();
                }
            });
        }
        
        function populateAdjustmentsTable(adjustments) {
            const tbody = $('#adjustmentsTableBody');
            tbody.empty();
            
            if (!adjustments || adjustments.length === 0) {
                $('#noResults').show();
                return;
            }
            
            let totalDebits = 0;
            let totalCredits = 0;
            
            adjustments.forEach(function(adj) {
                const debitAmount = adj.debit_amount ? parseFloat(adj.debit_amount) : 0;
                const creditAmount = adj.credit_amount ? parseFloat(adj.credit_amount) : 0;
                
                totalDebits += debitAmount;
                totalCredits += creditAmount;
                
                const row = `
                    <tr class="${adj.status === 'REVERSED' ? 'table-warning' : ''}">
                        <td class="small">${formatDate(adj.adjustment_date)}</td>
                        <td class="small">${adj.reference_no || '-'}</td>
                        <td class="small d-none d-md-table-cell">
                            <span class="badge badge-info badge-sm">${getAdjustmentTypeName(adj.adjustment_type)}</span>
                        </td>
                        <td class="small">${adj.description}</td>
                        <td class="small d-none d-md-table-cell">${adj.ledger_name || adj.external_source}</td>
                        <td class="small amount-column">
                            ${debitAmount ? '₹' + formatAmount(debitAmount) : '-'}
                        </td>
                        <td class="small amount-column">
                            ${creditAmount ? '₹' + formatAmount(creditAmount) : '-'}
                        </td>
                        <td class="small text-center">
                            <span class="badge ${getStatusBadgeClass(adj.status)} status-badge">${adj.status}</span>
                        </td>
                        <td class="small d-none d-md-table-cell">${adj.created_by}</td>
                        <td class="text-center">
                            ${getActionButtons(adj)}
                        </td>
                    </tr>
                `;
                tbody.append(row);
            });
            
            $('#resultCount').text(`${adjustments.length} adjustment${adjustments.length !== 1 ? 's' : ''} found`);
            $('#totalDebits').text('₹' + formatAmount(totalDebits));
            $('#totalCredits').text('₹' + formatAmount(totalCredits));
            
            $('#adjustmentsTableContainer').show();
            $('#summaryFooter').show();
        }
        
        function clearFilters() {
            $('#adjustmentFiltersForm')[0].reset();
            $('#filterStatus').val('ACTIVE');
            $('#filterDateRange').val('last_30_days');
            
            updateAdjustmentDateRange();
            applyFilters();
        }
        
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-GB');
        }
        
        function formatAmount(amount) {
            return new Intl.NumberFormat('en-IN', { 
                minimumFractionDigits: 2, 
                maximumFractionDigits: 2 
            }).format(amount);
        }
        
        function getAdjustmentTypeName(typeId) {
            const type = adjustmentTypesData.find(t => t.lookup_id == typeId);
            return type ? type.description : 'Unknown';
        }
        
        function getStatusBadgeClass(status) {
            switch(status) {
                case 'ACTIVE': return 'badge-success';
                case 'REVERSED': return 'badge-warning';
                default: return 'badge-secondary';
            }
        }
        
        function getActionButtons(adj) {
            if (window.userRole === 'Admin' || window.userRole === 'SuperUser') {
                if (adj.status === 'ACTIVE' && adj.adjustment_type !== 'REVERSAL') {
                    return `
                        <button class="btn btn-outline-warning btn-sm" 
                                onclick="reverseAdjustmentEnhanced(${adj.adjustment_id})"
                                title="Reverse this adjustment">
                            <i class="bi bi-arrow-counterclockwise"></i>
                        </button>
                    `;
                } else if (adj.status === 'REVERSED') {
                    return '<span class="text-muted small">Reversed</span>';
                } else if (adj.adjustment_type === 'REVERSAL') {
                    return '<span class="text-muted small">Reversal Entry</span>';
                }
            }
            return '<span class="text-muted small">-</span>';
        }
        
        function reverseAdjustmentEnhanced(adjustmentId) {
            if (confirm('Are you sure you want to reverse this adjustment? This action cannot be undone.')) {
                $.ajax({
                    url: `/adjustments/api/${adjustmentId}/reverse`,
                    method: 'POST',
                    success: function(response) {
                        if (response.success) {
                            alert('Adjustment reversed successfully.');
                            applyFilters();
                        } else {
                            alert('Failed to reverse adjustment: ' + response.error);
                        }
                    },
                    error: function(xhr, status, error) {
                        alert('Error reversing adjustment: ' + error);
                    }
                });
            }
        }
        
        function showError(message) {
            alert(message);
        }
        
        $('#filterSearch').keypress(function(e) {
            if (e.which === 13) {
                applyFilters();
            }
        });