extends layout

block content
    form(method='POST' action='/reports-cashflow')
        script.
            
                // Javascript that gets table data
            
                var bankTransactionFromServer = !{JSON.stringify(bankTransactions)} 
                
            

                
                function renderTable(array,tabletitle,numberColumns = [],tableWidthClass = '') {

                    // Check if the array is empty
                        if (array.length === 0) {
                            return "<p class='text-center'><strong> *** No "+tabletitle+" *** </strong></p>";  // Just return a simple message if no data
                        }

                    var result = "<div class='card' style='margin-bottom: 10px;'>"; // Start card container
                            result += "<div class='card-header text-center font-weight-bold' >"+tabletitle+"</div>"; // Card header
                            result += "<div class='card-body " + tableWidthClass + "' style='padding-bottom: 10px;'>"; // Card body with optional width class
                            result += "<table class='table table-bordered table-sm' style='width: 100%; border: 1px solid #000;'>"; // Darker border for the table                                       
                    
                    // If the array is not empty, add headers from the keys of the first object
                    if (array.length > 0 && typeof array[0] === 'object') {
                        result += "<thead class='thead-light text-center'><tr>";
                        Object.keys(array[0]).forEach(key => {                       
                            result += "<th style='border: 1px solid #000;'>" + key + "</th>"; // Darker border for headers
                        });
                        result += "</tr></thead>";
                    }
                
                    // Loop through the array to build table rows
                    result += "<tbody>";
                    
                    for (var i = 0; i < array.length; i++) {



                        let rowClass = '';  // Default row class (no styling)

                        // Check if it's the last row and contains "Total"
                        if (i === array.length - 1) {
                            // Check if it's the last row and contains "Total" or "Excess"
                            let isTotalRow = Object.values(array[i]).some(value => value && 
                                (value.toString().toLowerCase().includes("total") || value.toString().toLowerCase().includes("excess"))
                            );

                            if (isTotalRow) {
                                rowClass = 'font-weight-bold'; // Apply bold  for "Total" row
                            }
                        }


                        result += "<tr>";                   
                        Object.keys(array[i]).forEach(key => {
                            let dataValue = array[i][key];   

                        
                        
                        // Check if the current column should be formatted as a number
                            if (numberColumns.includes(key) && dataValue !== "" &&!isNaN(dataValue))
                            {
                            
                                printedValue = new Intl.NumberFormat('en-IN', {
                                                                    style: 'decimal',                                                                
                                                                    minimumFractionDigits:2,
                                                                    maximumFractionDigits:2	
                                                                }).format(dataValue); 

                                result += "<td class='" + rowClass + " text-right' style='border: 1px solid #000;'>" + printedValue + "</td>"; // Darker border for cells                                                    
                            }
                            else
                                result += "<td class='" + rowClass + " text-left' style='border: 1px solid #000;'>" + dataValue + "</td>"; // Darker border for cells
                        });
                        result += "</tr>";
                    }
                    result += "</tbody>";
                    result += "</table>";
                    result += "</div>"; // Close card body
                    result += "</div>"; // Close card container
                    return result;
                }

                        


                document.addEventListener('DOMContentLoaded', function() {

                    document.addEventListener('DOMContentLoaded', function() {
                    if (personLocations.length === 1) {
                            document.getElementById('locationCode').value = personLocations[0].LocationCodes;
                        }
                    }); 


                    const goButton = document.getElementById('goButton');
                    const overlay = document.getElementById('loadingOverlay');

                    goButton.addEventListener('click', function(event) {
                        // Prevent form submission if you want to show the overlay while processing
                        event.preventDefault();

                        // Show the overlay
                        overlay.style.display = 'flex';

                        // Simulate a loading process (for example, wait for 2 seconds)
                        setTimeout(function() {
                            // Hide the overlay once the process is done
                            overlay.style.display = 'none';
                            
                            // Optionally, submit the form after the overlay is hidden
                            document.querySelector('form').submit();
                        }, 2000);  // 2 seconds delay, replace with real processing time
                    });
                    
                
                    
                        let resultHtml = ""; // Variable to store the generated HTML

                        // Loop through each bank account group
                        Object.keys(bankTransactionFromServer).forEach(account => {
                            const transactions = bankTransactionFromServer[account];

                            // Use the existing renderTable function
                            resultHtml += renderTable(
                                transactions, 
                                `Transactions for ${account}`, // Title for each account
                                ["Credit", "Debit"], // Columns to format as numbers
                                "col-sm-8 mx-auto" // Optional class for table width
                            );
                        });

                    
                    document.getElementById('banktransaction-table-container').innerHTML = resultHtml
                });

        table.center
            tr
                td Cashflow Date:
                td
                    input#cfclosingDate.form-control(type='date', name='cfclosingDate', value=cfclosingDate max=currentDate format="dd/mm/yyyy" required)                    
                td &nbsp;                
                include report-print-download.pug    
    div &nbsp;
    div
        if cashflowstmt && cashflowstmt.length > 0
            div.row &nbsp;
            h4.font-weight-bold.text-center= "CashFlow Report"                             
            h4.text-center.text-muted #{cfclosingDate}        
            h4.font-weight-bold.text-success.text-center
    div
        if cashflowstmt && cashflowstmt.length > 0
            table.table.table-bordered.border.table-sm
                thead(class="thead-light")
                    tr
                        th.text-right(style="border: 1px solid black;") Transaction Type
                        th.text-right(style="border: 1px solid black;") Description
                        th.text-right(style="border: 1px solid black;") Debit
                        th.text-right(style="border: 1px solid black;") Credit
                       
                tbody
                        - var totalcredits = 0;
                        - var totaldedits = 0;
                        - var totalcash = 0;
                        - var difference = 0;
                        each val in cashflowstmt
                            tr
                            td.text-right(scope="row",style="border: 1px solid black;")= val.tranType
                            td.text-right(scope="row",style="border: 1px solid black;")= val.description
                            td.text-right(scope="row",style="border: 1px solid black;")= val.debit
                            td.text-right(scope="row",style="border: 1px solid black;")= val.credit 
                            - totalcredits += Number(val.credit)
                            - totaldedits  += Number(val.debit) 
                        tr
                            td &nbsp;                        
                            th.text-right Total
                            th.text-right.text-danger #{totaldedits.toFixed(2)}
                            th.text-right.text-danger #{totalcredits.toFixed(2)}
                        -totalcash = totalcredits-totaldedits
                        -difference = (TotalDenom || 0) - totalcash  // Ensure TotalDenom is defined before using it                         

             
            table.table-sm(class="table table-bordered text-center", style="width: 50%; margin: 20px auto;") 
                tbody                
                    tr
                        th(style="border: 1px solid black;") Denomination Total
                        th.text-right(style="border: 1px solid black;")= TotalDenom.toFixed(2)
                    tr
                        th(style="border: 1px solid black;") CashFlow Excess/Shortage
                        th.text-right(style="border: 1px solid black;")= difference.toFixed(2) 

            div.row
                div.col-md-12
                    div.row &nbsp;                
                    div(id="banktransaction-table-container")          
        else
            div.row &nbsp;
            div.row.bg-light No records to display.

    // Include the overlay
    include overlay.pug                         

    