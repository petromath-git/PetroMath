extends layout

block content
  .container-fluid
    .row.justify-content-center
      .col-12
        .card.shadow-lg.border-0
          .card-header.bg-primary.text-white
            .d-flex.justify-content-between.align-items-center
              h4.mb-0
                i.bi.bi-activity.me-2
                | System Health Monitor
              .badge.bg-light.text-dark#lastRefresh Loading...
          
          .card-body.p-4
            // Alert Section
            #alertSection.d-none.mb-4
              .alert.alert-warning.d-flex.align-items-center
                i.bi.bi-exclamation-triangle-fill.me-2
                span#alertMessage
            
            // Quick Status Overview
            .row.mb-4
              .col-md-3.col-6.mb-3
                .card.h-100.border-0.shadow-sm.status-card
                  .card-body.text-center
                    i.bi.bi-cpu.display-4.text-primary.mb-2
                    h6.text-muted CPU Usage
                    h4#cpuUsage.text-primary ---%
              .col-md-3.col-6.mb-3
                .card.h-100.border-0.shadow-sm.status-card
                  .card-body.text-center
                    i.bi.bi-memory.display-4.text-info.mb-2
                    h6.text-muted Memory Usage
                    h4#memoryUsage.text-info ---%
              .col-md-3.col-6.mb-3
                .card.h-100.border-0.shadow-sm.status-card
                  .card-body.text-center
                    i.bi.bi-database.display-4.text-success.mb-2
                    h6.text-muted Database Status
                    h4#dbStatus.text-success Connected
              .col-md-3.col-6.mb-3
                .card.h-100.border-0.shadow-sm.status-card
                  .card-body.text-center
                    i.bi.bi-wifi.display-4.text-warning.mb-2
                    h6.text-muted Network Status
                    h4#networkStatus.text-warning Online

            // Detailed Metrics Tabs
            ul.nav.nav-tabs#healthTabs
              li.nav-item
                a.nav-link.active#server-tab(href="#server" data-toggle="tab") Server Performance
              li.nav-item
                a.nav-link#database-tab(href="#database" data-toggle="tab") Database Health
              li.nav-item
                a.nav-link#network-tab(href="#network" data-toggle="tab") Network & Storage
              li.nav-item
                a.nav-link#services-tab(href="#services" data-toggle="tab") System Services

            .tab-content.mt-4
              // Server Performance Tab
              .tab-pane.fade.show.active#server
                .row
                  .col-md-6.mb-4
                    .card.border-0.shadow-sm
                      .card-header.bg-light
                        h6.mb-0
                          i.bi.bi-speedometer2.me-2
                          | CPU & Memory
                      .card-body
                        .row
                          .col-6
                            p.mb-1
                              strong CPU Cores: 
                              span#cpuCores --
                            p.mb-1
                              strong CPU Usage: 
                              span#cpuUsageDetail ---%
                            .progress.mb-3(style="height: 8px;")
                              .progress-bar.bg-primary#cpuProgressBar(style="width: 0%")
                          .col-6
                            p.mb-1
                              strong Total Memory: 
                              span#totalMemory -- GB
                            p.mb-1
                              strong Used Memory: 
                              span#usedMemory -- GB
                            .progress.mb-3(style="height: 8px;")
                              .progress-bar.bg-info#memoryProgressBar(style="width: 0%")

                  .col-md-6.mb-4
                    .card.border-0.shadow-sm
                      .card-header.bg-light
                        h6.mb-0
                          i.bi.bi-clock.me-2
                          | System Information
                      .card-body
                        p.mb-2
                          strong Hostname: 
                          span#hostname --
                        p.mb-2
                          strong Platform: 
                          span#platform --
                        p.mb-2
                          strong Architecture: 
                          span#architecture --
                        p.mb-2
                          strong Uptime: 
                          span#uptime --
                        p.mb-0
                          strong Node.js: 
                          span#nodeVersion --

              // Database Health Tab
              .tab-pane.fade#database
                .row
                  .col-md-6.mb-4
                    .card.border-0.shadow-sm
                      .card-header.bg-light
                        h6.mb-0
                          i.bi.bi-database.me-2
                          | Database Connections
                      .card-body
                        .row
                          .col-6
                            p.mb-2
                              strong Active: 
                              span#dbActiveConnections 0
                            p.mb-2
                              strong Running: 
                              span#dbRunningThreads 0
                            p.mb-0
                              strong Max Used: 
                              span#dbMaxUsedConnections 0
                          .col-6
                            p.mb-2
                              strong Max Allowed: 
                              span#dbMaxConnections 151
                            p.mb-2
                              strong Total Ever: 
                              span#dbTotalConnections 0
                            .progress(style="height: 8px;")
                              .progress-bar.bg-success#dbConnectionsProgressBar(style="width: 0%")

                  .col-md-6.mb-4
                    .card.border-0.shadow-sm
                      .card-header.bg-light
                        h6.mb-0
                          i.bi.bi-graph-up.me-2
                          | Database Performance
                      .card-body
                        p.mb-2
                          strong Database Size: 
                          span#dbSize 0 MB
                        p.mb-2
                          strong Slow Queries: 
                          span#dbSlowQueries 0
                        p.mb-2
                          strong Queries/Second: 
                          span#dbQueriesPerSecond 0
                        p.mb-0
                          strong Locked Tables: 
                          span#dbLockedTables 0

              // Network & Storage Tab
              .tab-pane.fade#network
                .row
                  .col-md-6.mb-4
                    .card.border-0.shadow-sm
                      .card-header.bg-light
                        h6.mb-0
                          i.bi.bi-wifi.me-2
                          | Network Status
                      .card-body
                        p.mb-2
                          strong Connectivity: 
                          span#networkConnectivity --
                        p.mb-2
                          strong Latency: 
                          span#networkLatency --
                        p.mb-2
                          strong Interfaces: 
                          span#networkInterfaces --
                        #networkInterfacesList

                  .col-md-6.mb-4
                    .card.border-0.shadow-sm
                      .card-header.bg-light
                        h6.mb-0
                          i.bi.bi-hdd.me-2
                          | Storage Information
                      .card-body
                        p.mb-2
                          strong Root Filesystem: 
                          span#storageFilesystem --
                        p.mb-2
                          strong Total Space: 
                          span#storageTotal --
                        p.mb-2
                          strong Available: 
                          span#storageAvailable --
                        p.mb-0
                          strong Usage: 
                          span#storageUsage --%
                        .progress.mt-2(style="height: 8px;")
                          .progress-bar#storageProgressBar(style="width: 0%")

              // System Services Tab
              .tab-pane.fade#services
                .row
                  .col-12.mb-4
                    .card.border-0.shadow-sm
                      .card-header.bg-light
                        h6.mb-0
                          i.bi.bi-gear.me-2
                          | Critical Services Status
                      .card-body
                        #servicesList
                          p.text-muted Loading services...

            // Refresh Controls
            .row.mt-4
              .col-12.text-center
                button.btn.btn-primary.me-2#refreshBtn
                  i.bi.bi-arrow-clockwise.me-1
                  | Refresh Now
                .form-check.form-switch.d-inline-block.ms-3
                  input.form-check-input#autoRefreshToggle(type="checkbox" checked)
                  label.form-check-label(for="autoRefreshToggle") Auto-refresh (30s)

  // JavaScript for functionality
  script.
    let autoRefreshInterval;
    let metricsData = {};
    
    // Parse initial data safely
    try {
        metricsData = !{initialMetrics || '{}'};
        if (typeof metricsData === 'string') {
            metricsData = JSON.parse(metricsData);
        }
    } catch (e) {
        console.warn('Failed to parse initial metrics:', e);
        metricsData = {};
    }
    
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Dashboard loaded with data:', metricsData);
        
        // Initialize with server data if available
        if (metricsData && Object.keys(metricsData).length > 0) {
            updateDashboard(metricsData);
        } else {
            // Load data immediately if no initial data
            refreshMetrics();
        }
        
        // Set up refresh controls
        document.getElementById('refreshBtn').addEventListener('click', refreshMetrics);
        document.getElementById('autoRefreshToggle').addEventListener('change', toggleAutoRefresh);
        
        // Start auto-refresh if enabled
        if (document.getElementById('autoRefreshToggle').checked) {
            startAutoRefresh();
        }
        
        // Update last refresh time
        updateLastRefreshTime();
    });
    
    function refreshMetrics() {
        console.log('Refreshing metrics...');
        showLoading(true);
        
        fetch('/system-health/api/metrics')
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('Received data:', data);
                if (data.success) {
                    metricsData = data.data;
                    updateDashboard(data.data);
                    updateLastRefreshTime();
                    hideAlert();
                } else {
                    showAlert('Failed to fetch metrics: ' + (data.error || 'Unknown error'), 'danger');
                }
            })
            .catch(error => {
                console.error('Error fetching metrics:', error);
                showAlert('Network error while fetching metrics: ' + error.message, 'danger');
            })
            .finally(() => {
                showLoading(false);
            });
    }
    
    function updateDashboard(data) {
        console.log('Updating dashboard with:', data);
        
        if (!data) {
            console.warn('No data provided to updateDashboard');
            return;
        }
        
        // Update quick status cards (with safe defaults)
        updateElement('cpuUsage', (data.server?.cpu?.usage || 0) + '%');
        updateElement('memoryUsage', (data.server?.memory?.usagePercent || 0) + '%');
        updateElement('dbStatus', data.database?.status === 'connected' ? 'Connected' : 'Error');
        updateElement('networkStatus', data.network?.connectivity === 'online' ? 'Online' : 'Offline');
        
        // Update server performance (with safe defaults)
        updateElement('cpuCores', data.server?.cpu?.cores || '--');
        updateElement('cpuUsageDetail', (data.server?.cpu?.usage || 0) + '%');
        updateElement('totalMemory', data.server?.memory?.total || '--');
        updateElement('usedMemory', data.server?.memory?.used || '--');
        updateElement('hostname', data.systemInfo?.hostname || '--');
        updateElement('platform', data.systemInfo?.platform || '--');
        updateElement('architecture', data.systemInfo?.architecture || '--');
        updateElement('uptime', data.server?.uptime?.formatted || '--');
        updateElement('nodeVersion', data.systemInfo?.nodeVersion || '--');
        
        // Update progress bars with safe defaults
        updateProgressBar('cpuProgressBar', data.server?.cpu?.usage || 0);
        updateProgressBar('memoryProgressBar', data.server?.memory?.usagePercent || 0);
        
        // Update database health (with safe property access)
        if (data.database && data.database.connections) {
            updateElement('dbActiveConnections', data.database.connections.active || 0);
            updateElement('dbRunningThreads', data.database.connections.running || 0);
            updateElement('dbMaxConnections', data.database.connections.max || 151);
            updateElement('dbMaxUsedConnections', data.database.connections.maxUsed || 0);
            updateElement('dbTotalConnections', data.database.connections.totalConnections || 0);
            
            // Database connection usage progress bar
            const dbUsage = (data.database.connections.active / data.database.connections.max) * 100;
            updateProgressBar('dbConnectionsProgressBar', dbUsage || 0);
        }
        
        if (data.database && data.database.storage) {
            updateElement('dbSize', (data.database.storage.databaseSize || 0) + ' MB');
        }
        
        if (data.database && data.database.performance) {
            updateElement('dbSlowQueries', data.database.performance.slowQueries || 0);
            updateElement('dbQueriesPerSecond', data.database.performance.queriesPerSecond || 0);
        }
        
        if (data.database && data.database.tables) {
            updateElement('dbLockedTables', data.database.tables.locked || 0);
        }
        
        // Update network (with safe defaults)
        updateElement('networkConnectivity', data.network?.connectivity || '--');
        updateElement('networkLatency', data.network?.latency || '--');
        updateElement('networkInterfaces', data.network?.interfaceCount || '--');
        
        // Update storage (with safe defaults)
        updateElement('storageFilesystem', data.storage?.root?.filesystem || '--');
        updateElement('storageTotal', data.storage?.root?.total || '--');
        updateElement('storageAvailable', data.storage?.root?.available || '--');
        updateElement('storageUsage', (data.storage?.root?.usagePercent || 0) + '%');
        updateProgressBar('storageProgressBar', data.storage?.root?.usagePercent || 0);
        
        // Update services (with safe defaults)
        updateServices(data.services || {});
        
        // Check for alerts (with safe defaults)
        checkAlerts(data);
    }
    
    function updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value || '--';
        } else {
            console.warn('Element not found:', id);
        }
    }
    
    function updateProgressBar(id, percentage) {
        const bar = document.getElementById(id);
        if (bar) {
            const safePercentage = Math.max(0, Math.min(100, percentage || 0));
            bar.style.width = safePercentage + '%';
            bar.setAttribute('aria-valuenow', safePercentage);
            
            // Update color based on usage
            bar.className = 'progress-bar';
            if (safePercentage > 90) {
                bar.classList.add('bg-danger');
            } else if (safePercentage > 75) {
                bar.classList.add('bg-warning');
            } else {
                bar.classList.add('bg-success');
            }
        }
    }
    
    function updateServices(services) {
        const servicesList = document.getElementById('servicesList');
        if (!servicesList) return;
        
        let html = '';
        Object.entries(services).forEach(([service, status]) => {
            if (service === 'platform') return; // Skip platform info
            
            let badgeClass = 'secondary';
            let icon = 'question-circle';
            
            switch(status) {
                case 'running':
                    badgeClass = 'success';
                    icon = 'check-circle';
                    break;
                case 'stopped':
                    badgeClass = 'danger';
                    icon = 'x-circle';
                    break;
                case 'not_found':
                    badgeClass = 'warning';
                    icon = 'exclamation-triangle';
                    break;
            }
            
            html += `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <span><i class="bi bi-${icon} me-2"></i>${service}</span>
                    <span class="badge bg-${badgeClass}">${status}</span>
                </div>
            `;
        });
        
        servicesList.innerHTML = html || '<p class="text-muted">No services to display</p>';
    }
    
    function checkAlerts(data) {
        const alerts = [];
        
        // Check high memory usage (with safe access)
        const memoryUsage = data.server?.memory?.usagePercent || 0;
        if (memoryUsage > 85) {
            alerts.push(`High memory usage: ${memoryUsage}%`);
        }
        
        // Check high CPU usage (with safe access)
        const cpuUsage = data.server?.cpu?.usage || 0;
        if (cpuUsage > 80) {
            alerts.push(`High CPU usage: ${cpuUsage}%`);
        }
        
        // Check high storage usage (with safe access)
        const storageUsage = data.storage?.root?.usagePercent || 0;
        if (storageUsage > 90) {
            alerts.push(`High disk usage: ${storageUsage}%`);
        }
        
        // Check database connectivity (with safe access)
        if (data.database?.status !== 'connected') {
            alerts.push('Database connection issue');
        }
        
        // Check network connectivity (with safe access)
        if (data.network?.connectivity !== 'online') {
            alerts.push('Network connectivity issue');
        }
        
        if (alerts.length > 0) {
            showAlert(alerts.join(', '), 'warning');
        } else {
            hideAlert();
        }
    }
    
    function showAlert(message, type = 'warning') {
        const alertSection = document.getElementById('alertSection');
        const alertMessage = document.getElementById('alertMessage');
        
        if (alertSection && alertMessage) {
            alertMessage.textContent = message;
            alertSection.className = `alert alert-${type} d-flex align-items-center mb-4`;
            alertSection.classList.remove('d-none');
        }
    }
    
    function hideAlert() {
        const alertSection = document.getElementById('alertSection');
        if (alertSection) {
            alertSection.classList.add('d-none');
        }
    }
    
    function showLoading(show) {
        const refreshBtn = document.getElementById('refreshBtn');
        if (refreshBtn) {
            if (show) {
                refreshBtn.innerHTML = '<i class="bi bi-arrow-clockwise spin me-1"></i>Loading...';
                refreshBtn.disabled = true;
            } else {
                refreshBtn.innerHTML = '<i class="bi bi-arrow-clockwise me-1"></i>Refresh Now';
                refreshBtn.disabled = false;
            }
        }
    }
    
    function toggleAutoRefresh() {
        const toggle = document.getElementById('autoRefreshToggle');
        if (toggle && toggle.checked) {
            startAutoRefresh();
        } else {
            stopAutoRefresh();
        }
    }
    
    function startAutoRefresh() {
        stopAutoRefresh(); // Clear any existing interval
        autoRefreshInterval = setInterval(refreshMetrics, 30000); // 30 seconds
    }
    
    function stopAutoRefresh() {
        if (autoRefreshInterval) {
            clearInterval(autoRefreshInterval);
            autoRefreshInterval = null;
        }
    }
    
    function updateLastRefreshTime() {
        const lastRefresh = document.getElementById('lastRefresh');
        if (lastRefresh) {
            const now = new Date();
            lastRefresh.textContent = `Last updated: ${now.toLocaleTimeString()}`;
        }
    }

  style.
    .status-card {
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    
    .status-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15) !important;
    }
    
    .spin {
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
    }
    
    .nav-tabs .nav-link {
        border: none;
        background: none;
        color: #6c757d;
        padding: 12px 20px;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .nav-tabs .nav-link.active {
        background: linear-gradient(45deg, #007bff, #0056b3);
        color: white;
        border-radius: 8px;
    }
    
    .nav-tabs .nav-link:hover:not(.active) {
        background: rgba(0, 123, 255, 0.1);
        color: #007bff;
        border-radius: 8px;
    }
    
    .progress {
        background-color: #e9ecef;
        border-radius: 10px;
        overflow: hidden;
    }
    
    .progress-bar {
        transition: width 0.6s ease, background-color 0.3s ease;
        border-radius: 10px;
    }
    
    .card {
        border-radius: 12px;
        transition: all 0.3s ease;
    }
    
    .card-header {
        border-radius: 12px 12px 0 0 !important;
        border-bottom: 1px solid rgba(0,0,0,0.1);
    }
    
    .badge {
        font-size: 0.8rem;
        padding: 0.4em 0.8em;
        border-radius: 20px;
    }
    
    /* Mobile responsive adjustments */
    @media (max-width: 768px) {
        .container-fluid {
            padding: 10px;
        }
        
        .card-body {
            padding: 1.5rem !important;
        }
        
        .status-card .card-body {
            padding: 1rem !important;
        }
        
        .nav-tabs .nav-link {
            padding: 8px 12px;
            font-size: 0.9rem;
        }
        
        .display-4 {
            font-size: 2rem !important;
        }
        
        h4 {
            font-size: 1.2rem;
        }
        
        h6 {
            font-size: 0.9rem;
        }
    }
    
    @media (max-width: 576px) {
        .col-6 {
            padding-left: 5px;
            padding-right: 5px;
        }
        
        .nav-tabs {
            flex-wrap: wrap;
        }
        
        .nav-tabs .nav-link {
            margin-bottom: 5px;
            font-size: 0.8rem;
            padding: 6px 10px;
        }
    }