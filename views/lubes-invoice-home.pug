extends layout

block content
    style.
        .toggle-icon {
            transition: transform 0.2s ease-in-out;
        }
        [aria-expanded="true"] .toggle-icon {
            transform: rotate(90deg);
        }
        .nested-table {
            background-color: #f8f9fa;
            margin: 0;
        }
        .nested-table th {
            background-color: #e9ecef;
        }
        .loading-spinner {
            text-align: center;
            padding: 20px;
        }
        .collapse-row {
            background-color: #f8f9fa;
        }
        .line-details {
            padding: 0 !important;
        }

    script.
        function deleteInvoice(invoiceId, status) {
            // Existing delete function remains the same
            if (status !== 'DRAFT') {
                alert('Only draft invoices can be deleted.');
                return;
            }
            if (confirm('Are you sure you want to delete this invoice?')) {
                fetch(`/lubes-invoice/delete?id=${invoiceId}`, {
                    method: 'GET'
                })
                .then(response => response.json())
                .then(result => {
                    if (result.success || result.message) {
                        alert(result.message || 'Invoice deleted successfully');
                        window.location.reload();
                    } else {
                        alert('Failed to delete invoice');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the invoice');
                });
            }
        }

        function toggleInvoiceLines(invoiceId, button) {
            const lineContainer = document.getElementById(`invoice-lines-${invoiceId}`);
            const isExpanded = button.getAttribute('aria-expanded') === 'true';
            
            // Toggle aria-expanded
            button.setAttribute('aria-expanded', !isExpanded);
            
            // Toggle the collapse
            if (!isExpanded) {
                lineContainer.classList.add('show');
                if (!lineContainer.hasAttribute('data-loaded')) {
                    lineContainer.innerHTML = '<div class="loading-spinner">Loading invoice details...</div>';
                    
                    fetch(`/lubes-invoice/lines?id=${invoiceId}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success && data.lines) {
                                const linesTable = createLinesTable(data.lines);
                                lineContainer.innerHTML = linesTable;
                                lineContainer.setAttribute('data-loaded', 'true');
                            } else {
                                lineContainer.innerHTML = '<div class="p-3">No lines found</div>';
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            lineContainer.innerHTML = '<div class="p-3 text-danger">Error loading invoice lines</div>';
                        });
                }
            } else {
                lineContainer.classList.remove('show');
            }
        }

        function createLinesTable(lines) {
            if (!lines || lines.length === 0) return '<div class="p-3">No lines found</div>';
            
            let html = `
                <div class="p-3">
                    <table class="table table-sm nested-table">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th class="text-right">Quantity</th>
                                <th class="text-right">MRP</th>
                                <th class="text-right">Net Rate</th>
                                <th class="text-right">Amount</th>
                                <th>Notes</th>
                            </tr>
                        </thead>
                        <tbody>`;
            
            let totalAmount = 0;
            
            lines.forEach(line => {
                totalAmount += parseFloat(line.amount) || 0;
                html += `
                    <tr>
                        <td>${line.product_name || 'Unknown Product'}</td>
                        <td class="text-right">${line.qty.toFixed(2)}</td>
                        <td class="text-right">${line.mrp.toFixed(2)}</td>
                        <td class="text-right">${line.net_rate.toFixed(2)}</td>
                        <td class="text-right">${line.amount.toFixed(2)}</td>
                        <td>${line.notes || ''}</td>
                    </tr>`;
            });
            
            html += `
                    <tr class="table-info">
                        <td colspan="4" class="text-right"><strong>Total:</strong></td>
                        <td class="text-right"><strong>${totalAmount.toFixed(2)}</strong></td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
            </div>`;
            
            return html;
        }

    div.row
        div.col-6
            form(method='GET' action='/lubes-invoice-home' id='lubesinvoicehome')
                table.center
                    tr
                        td From Date:
                        td
                            input#invoice_fromDate.form-control(
                                type='date', 
                                name='invoice_fromDate', 
                                value=fromDate, 
                                max=currentDate, 
                                format="dd/mm/yyyy" 
                                required 
                                onChange="copyToHidden(this);"
                            )
                        td &nbsp;
                        td To Date:
                        td
                            input#invoice_toDate.form-control(
                                type='date', 
                                name='invoice_toDate', 
                                value=toDate, 
                                max=currentDate, 
                                format="dd/mm/yyyy" 
                                required 
                                onChange="copyToHidden(this);"
                            )
                        td &nbsp;
                        td
                            button.btn.btn-primary(type='submit') Go
        div.col-6
            form(method='GET' action='/lubes-invoice/new' id='newinvoice')
                input(type='hidden' id='invoice_fromDate_hiddenValue' name='invoice_fromDate_hiddenValue' value=fromDate)
                input(type='hidden' id='invoice_toDate_hiddenValue' name='invoice_toDate_hiddenValue' value=toDate)
                div(style="text-align:right;")
                    button.btn.btn-primary(type='submit') Create New Invoice

    div &nbsp;
    div
        if invoiceValues && invoiceValues.length > 0
            table.table
                thead.thead-light
                    tr
                        th(style="width: 30px")
                        th Invoice Number
                        th Supplier
                        th Date
                        th.text-right Amount
                        th.text-center Lines
                        th Status
                        th Actions
                tbody
                    each val in invoiceValues
                        tr(class=val.closing_status.toLowerCase())
                            td
                                button.btn.btn-sm.btn-link.p-0(
                                    type='button'
                                    onclick=`toggleInvoiceLines(${val.lubes_hdr_id}, this)`
                                    aria-expanded='false'
                                )
                                    i.oi.oi-chevron-right.toggle-icon
                            td= val.invoice_number
                            td= val.supplier_name
                            td= val.date
                            td.text-right= val.amount.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })
                            td.text-center
                                span.badge.badge-info= val.total_lines
                            td
                                span(class=val.closing_status === 'DRAFT' ? 'badge badge-warning' : 'badge badge-success')
                                    = val.closing_status
                            if (val.closing_status === 'DRAFT')
                                td
                                    a.btn.btn-sm.btn-info.mr-2(href='/lubes-invoice?id=' + val.lubes_hdr_id)
                                        span.oi.oi-pencil
                                    a.btn.btn-sm.btn-danger(onClick=`deleteInvoice(${val.lubes_hdr_id}, '${val.closing_status}')`)
                                        span.oi.oi-trash
                            else
                                td
                                    a.btn.btn-sm.btn-info(href='/lubes-invoice?id=' + val.lubes_hdr_id)
                                        span.oi.oi-envelope-open
                        tr.collapse-row
                            td.line-details(colspan='8')
                                div.collapse(id=`invoice-lines-${val.lubes_hdr_id}`)