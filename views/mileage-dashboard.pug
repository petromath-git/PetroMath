extends layout-customer

block content
    style.
        .dashboard-card {
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: transform 0.2s;
            margin-bottom: 20px;
        }
        .dashboard-card:hover {
            transform: translateY(-2px);
        }
        .metric-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        .vehicle-card {
            border-left: 4px solid #28a745;
        }
        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }
        .mileage-good { color: #28a745; font-weight: bold; }
        .mileage-average { color: #ffc107; font-weight: bold; }
        .mileage-poor { color: #dc3545; font-weight: bold; }
        .fuel-entry-form {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
        }
        // New styles for grouped report
        .vehicle-header {
            cursor: pointer;
            transition: all 0.3s ease;
            border-radius: 8px;
            margin-bottom: 10px;
        }
        .vehicle-header:hover {
            background-color: #f8f9fa;
            transform: translateY(-1px);
        }
       .vehicle-summary {
            background: #ffffff;
            color: #333;
            border-radius: 8px;
            padding: 15px;
            border: 1px solid #e9ecef;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }
        .vehicle-summary.poor-performance {
            background: #ffffff;
            border-left: 4px solid #dc3545;
            color: #333;
        }
        .vehicle-summary.average-performance {
            background: #ffffff;
            border-left: 4px solid #ffc107;
            color: #333;
        }
        .vehicle-summary:not(.poor-performance):not(.average-performance) {
            border-left: 4px solid #28a745;
        }

        .number-plate {
            background: linear-gradient(to bottom, #ffffff 0%, #f8f9fa 100%);
            color: #000;
            border: 3px solid #333;
            border-radius: 8px;
            padding: 6px 12px;
            font-family: 'Arial Black', Arial, sans-serif;
            font-weight: 900;
            font-size: 18px;
            text-align: center;
            box-shadow: 0 3px 6px rgba(0,0,0,0.4), inset 0 1px 2px rgba(255,255,255,0.8);
            display: inline-block;
            min-width: 160px;
            position: relative;
            letter-spacing: 1px;
        }
        .number-plate::before {
            content: "IND";
            position: absolute;
            top: -2px;
            left: 8px;
            font-size: 10px;
            font-weight: bold;
            color: #000;
            background: #ffffff;
            padding: 0 4px;
            border-radius: 2px;
        }
        .number-plate::after {
            content: "";
            position: absolute;
            top: -2px;
            right: 8px;
            width: 20px;
            height: 12px;
            background: linear-gradient(to right, #ff9933 0%, #ff9933 33%, #ffffff 33%, #ffffff 66%, #138808 66%, #138808 100%);
            border: 1px solid #333;
            border-radius: 2px;
        }
        .transaction-details {
            background: #f8f9fa;
            border-radius: 0 0 8px 8px;
            border: 1px solid #dee2e6;
            border-top: none;
        }
        .collapse-icon {
            transition: transform 0.3s ease;
        }
        .collapsed .collapse-icon {
            transform: rotate(-90deg);
        }
        .vehicle-summary small {
            color: #6c757d !important;
        }

        .vehicle-summary .h6 {
            color: #333 !important;
        }

    div.container-fluid.mt-4
        // Header
        div.row
            div.col-12
                h2.text-center.mb-4
                    i.bi.bi-speedometer2.text-primary &nbsp;
                    | Vehicle Mileage Dashboard

        // Date Range Filter
        div.row.mb-4
            div.col-md-6.mx-auto
                div.card.dashboard-card
                    div.card-body
                        form#dateRangeForm
                            div.row
                                div.col-md-5
                                    label From Date:
                                    input#fromDate.form-control(type='date', value=fromDate)
                                div.col-md-5
                                    label To Date:
                                    input#toDate.form-control(type='date', value=toDate)
                                div.col-md-2.d-flex.align-items-end
                                    button.btn.btn-primary(type="button", onclick="loadMileageData()")
                                        i.bi.bi-search

        // Summary Cards
        div.row
            div.col-md-3
                div.card.dashboard-card.metric-card
                    div.card-body.text-center
                        i.bi.bi-truck.fa-2x.mb-2
                        h4#totalVehicles= fleetSummary.totalVehicles || 0
                        p Total Vehicles
            div.col-md-3
                div.card.dashboard-card.metric-card
                    div.card-body.text-center
                        i.bi.bi-fuel-pump.fa-2x.mb-2
                        h4#totalFuelConsumption= (fleetSummary.totalFuelConsumed || 0).toLocaleString() + ' L'
                        p Total Fuel Consumed
            div.col-md-3
                div.card.dashboard-card.metric-card
                    div.card-body.text-center
                        i.bi.bi-sign-turn-right.fa-2x.mb-2
                        h4#totalDistance= (fleetSummary.totalDistance || 0).toLocaleString() + ' km'
                        p Total Distance
            div.col-md-3
                div.card.dashboard-card.metric-card
                    div.card-body.text-center
                        i.bi.bi-graph-up.fa-2x.mb-2
                        h4#avgMileage= (fleetSummary.fleetAvgMileage || 0).toFixed(2) + ' KMPL'
                        p Fleet Average Mileage

        // Vehicle-wise Cards
        div.row
            div.col-12
                h4.mb-3
                    i.bi.bi-list-ul &nbsp;
                    | Vehicle-wise Performance

        div.row#vehicleCards
            if vehicleSummaries && vehicleSummaries.length > 0
                each vehicle in vehicleSummaries
                    - var mileageClass = vehicle.avgMileage >= 6 ? 'mileage-good' : (vehicle.avgMileage >= 4.5 ? 'mileage-average' : 'mileage-poor')
                    div.col-md-4.mb-3
                        div.card.dashboard-card.vehicle-card
                            div.card-body
                                h6
                                    i.bi.bi-truck &nbsp;
                                    = vehicle.vehicle_number
                                p.text-muted.small= vehicle.vehicle_type
                                div.row
                                    div.col-6
                                        small Avg Mileage
                                        h5(class=mileageClass)= vehicle.avgMileage.toFixed(2) + ' KMPL'
                                    div.col-6
                                        small Total Distance
                                        h6= vehicle.totalDistance.toLocaleString() + ' km'
                                div.row.mt-2
                                    div.col-6
                                        small Fuel Consumed
                                        h6= vehicle.totalFuelConsumed.toFixed(1) + ' L'
                                    div.col-6
                                        small Last Odometer
                                        h6= vehicle.lastOdometerReading.toLocaleString()
            else
                div.col-12
                    div.alert.alert-info
                        | No vehicle data available for the selected date range.

        // Charts Section
        //- div.row.mt-4
        //-     div.col-md-6
        //-         div.card.dashboard-card
        //-             div.card-header
        //-                 h5
        //-                     i.bi.bi-bar-chart &nbsp;
        //-                     | Mileage Comparison
        //-             div.card-body
        //-                 div.chart-container
        //-                     canvas#mileageChart

        //-     div.col-md-6
        //-         div.card.dashboard-card
        //-             div.card-header
        //-                 h5
        //-                     i.bi.bi-graph-up &nbsp;
        //-                     | Mileage Trend
        //-             div.card-body
        //-                 div.chart-container
        //-                     canvas#trendChart

        // Detailed Vehicle Reports
        div.row.mt-4
            div.col-12
                div.card.dashboard-card
                    div.card-header
                        h5
                            i.bi.bi-table &nbsp;
                            | Detailed Mileage Report
                    div.card-body#groupedMileageReport

        // Future Feature: External Fuel Entry
        div.row.mt-4
            div.col-12
                div.card.dashboard-card
                    div.card-header.bg-info.text-white
                        h5
                            i.bi.bi-plus-circle &nbsp;
                            | Add External Fuel Purchase (Coming Soon)
                    div.card-body.fuel-entry-form
                        div.alert.alert-info
                            i.bi.bi-info-circle &nbsp;
                            strong Coming Soon: &nbsp;
                            | You'll be able to add fuel purchases from other stations here to get a complete mileage picture.
                        form#externalFuelForm(style="opacity: 0.5;")
                            div.row
                                div.col-md-3
                                    label Date:
                                    input.form-control(type='date', disabled)
                                div.col-md-3
                                    label Vehicle:
                                    select.form-control(disabled)
                                        option Select Vehicle
                                div.col-md-2
                                    label Fuel (L):
                                    input.form-control(type='number', disabled)
                                div.col-md-2
                                    label Odometer:
                                    input.form-control(type='number', disabled)
                                div.col-md-2.d-flex.align-items-end
                                    button.btn.btn-success.btn-block(type='button', disabled)
                                        i.bi.bi-plus &nbsp;
                                        | Add

    // JavaScript for dashboard functionality
    script.
        // Convert server data to JavaScript variables
        var vehicleData = !{JSON.stringify(vehicleSummaries || [])};
        var detailedData = !{JSON.stringify(detailedData || [])};
        var trendData = !{JSON.stringify(trendData || {})};
        var fleetSummary = !{JSON.stringify(fleetSummary || {})};

        function loadMileageData() {
            const fromDate = document.getElementById('fromDate').value;
            const toDate = document.getElementById('toDate').value;
            
            if (!fromDate || !toDate) {
                alert('Please select both from and to dates');
                return;
            }
            
            console.log("Loading data from", fromDate, "to", toDate);
            
            // Show loading indicator
            const cards = document.querySelectorAll('.dashboard-card');
            cards.forEach(card => card.style.opacity = '0.6');
            
            // Make API call to refresh data
            fetch(`/mileage/api/data?fromDate=${fromDate}&toDate=${toDate}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Update page with new data
                        updateDashboard(data.data);
                    } else {
                        alert('Error loading data: ' + data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error loading dashboard data');
                })
                .finally(() => {
                    // Remove loading indicator
                    cards.forEach(card => card.style.opacity = '1');
                });
        }

        function updateDashboard(data) {
            // Update summary cards
            document.getElementById('totalVehicles').textContent = data.fleetSummary.totalVehicles || 0;
            document.getElementById('totalFuelConsumption').textContent = (data.fleetSummary.totalFuelConsumed || 0).toLocaleString() + ' L';
            document.getElementById('totalDistance').textContent = (data.fleetSummary.totalDistance || 0).toLocaleString() + ' km';
            document.getElementById('avgMileage').textContent = (data.fleetSummary.fleetAvgMileage || 0).toFixed(2) + ' KMPL';
            
            // Update global variables for charts
            vehicleData = data.vehicleSummaries || [];
            detailedData = data.detailedData || [];
            trendData = data.trendData || {};
            
            // Refresh vehicle cards
            populateVehicleCards(data.vehicleSummaries);
            
           
            
            // Refresh detailed table
            populateDetailedReport(data.detailedData);
        }

        function populateVehicleCards(vehicles) {
            const container = document.getElementById('vehicleCards');
            container.innerHTML = '';

            if (!vehicles || vehicles.length === 0) {
                container.innerHTML = '<div class="col-12"><div class="alert alert-info">No vehicle data available for the selected date range.</div></div>';
                return;
            }

            vehicles.forEach(vehicle => {
                const mileageClass = vehicle.avgMileage >= 6 ? 'mileage-good' : 
                                   vehicle.avgMileage >= 4.5 ? 'mileage-average' : 'mileage-poor';
                
                const card = `
                    <div class="col-md-4 mb-3">
                        <div class="card dashboard-card vehicle-card">
                            <div class="card-body">
                                <h6><i class="bi bi-truck"></i> ${vehicle.vehicle_number}</h6>
                                <p class="text-muted small">${vehicle.vehicle_type}</p>
                                <div class="row">
                                    <div class="col-6">
                                        <small>Avg Mileage</small>
                                        <h5 class="${mileageClass}">${vehicle.avgMileage.toFixed(2)} KMPL</h5>
                                    </div>
                                    <div class="col-6">
                                        <small>Total Distance</small>
                                        <h6>${vehicle.totalDistance.toLocaleString()} km</h6>
                                    </div>
                                </div>
                                <div class="row mt-2">
                                    <div class="col-6">
                                        <small>Fuel Consumed</small>
                                        <h6>${vehicle.totalFuelConsumed.toFixed(1)} L</h6>
                                    </div>
                                    <div class="col-6">
                                        <small>Last Odometer</small>
                                        <h6>${vehicle.lastOdometerReading.toLocaleString()}</h6>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                container.innerHTML += card;
            });
        }

        

        function populateDetailedReport(data) {
            const container = document.getElementById('groupedMileageReport');
            container.innerHTML = '';

            console.log('populateDetailedReport called with data:', data);
            console.log('Container found:', !!container);
            
            if (!container) {
                console.error('Container #groupedMileageReport not found!');
                return;
            }

            if (!data || data.length === 0) {
                container.innerHTML = '<div class="alert alert-info">No transactions with mileage data found.</div>';
                console.log('No data available');
                return;
            }

              // Debug: Show first few records
                console.log('First transaction:', data[0]);
                console.log('Total transactions:', data.length);

            // Group transactions by vehicle
            const groupedData = groupTransactionsByVehicle(data);
            
            // Create grouped sections
            Object.keys(groupedData).forEach((vehicleNumber, index) => {
                const vehicleGroup = groupedData[vehicleNumber];
                const transactions = vehicleGroup.transactions;
                const isExpanded = index === 0; // First vehicle expanded by default
                
                // Calculate vehicle summary stats
                const totalFuel = transactions.reduce((sum, t) => sum + t.fuel_quantity, 0);
                const totalDistance = transactions.reduce((sum, t) => sum + t.distance_run, 0);
                const avgMileage = transactions.reduce((sum, t) => sum + t.mileage_kmpl, 0) / transactions.length;
                
                // Format number plate (add spaces for proper Indian format)
                const formattedPlate = formatIndianNumberPlate(vehicleNumber);
                
                // Determine performance class
                const performanceClass = avgMileage >= 6 ? '' : 
                                        avgMileage >= 4.5 ? 'average-performance' : 'poor-performance';
                
                // Create the grouped section HTML
                const sectionHtml = `
                    <div class="mb-3">
                        <div class="vehicle-header ${isExpanded ? '' : 'collapsed'}" onclick="toggleVehicleSection('${vehicleNumber}')">
                            <div class="vehicle-summary ${performanceClass}">
                                <div class="row align-items-center">
                                    <div class="col-md-3">
                                        <div class="number-plate">${formattedPlate}</div>
                                        <small class="d-block mt-1" style="color: #e9ecef;">${vehicleGroup.vehicle_type}</small>
                                    </div>
                                    <div class="col-md-2">
                                        <small><i class="bi bi-speedometer2"></i> Avg Mileage</small>
                                        <div class="h6 mb-0">${avgMileage.toFixed(2)} KMPL</div>
                                    </div>
                                    <div class="col-md-2">
                                        <small><i class="bi bi-geo-alt"></i> Total Distance</small>
                                        <div class="h6 mb-0">${totalDistance.toLocaleString()} km</div>
                                    </div>
                                    <div class="col-md-2">
                                        <small><i class="bi bi-fuel-pump-fill"></i> Fuel Used</small>
                                        <div class="h6 mb-0">${totalFuel.toFixed(1)} L</div>
                                    </div>
                                    <div class="col-md-2">
                                        <small><i class="bi bi-list-ol"></i> Transactions</small>
                                        <div class="h6 mb-0">${transactions.length} entries</div>
                                    </div>
                                    <div class="col-md-1 text-end">
                                        <i class="bi bi-chevron-down collapse-icon" id="icon-${vehicleNumber}"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="collapse ${isExpanded ? 'show' : ''}" id="section-${vehicleNumber}">
                            <div class="transaction-details p-3">
                                <div class="table-responsive">
                                    <table class="table table-sm table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Date</th>
                                                <th>Bill No</th>
                                                <th>Fuel (L)</th>
                                                <th>Odometer</th>
                                                <th>Distance</th>
                                                <th>Mileage</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            ${transactions.map(transaction => {
                                                const statusClass = transaction.performanceStatus?.status === 'excellent' ? 'success' : 
                                                                transaction.performanceStatus?.status === 'good' ? 'warning' : 
                                                                transaction.performanceStatus?.status === 'average' ? 'info' : 'danger';
                                                
                                                const mileageClass = transaction.mileage_kmpl >= 6 ? 'mileage-good' : 
                                                                    transaction.mileage_kmpl >= 4.5 ? 'mileage-average' : 'mileage-poor';

                                                return `
                                                    <tr>
                                                        <td>${new Date(transaction.transaction_date).toLocaleDateString()}</td>
                                                        <td>${transaction.bill_no}</td>
                                                        <td>${transaction.fuel_quantity.toFixed(2)}</td>
                                                        <td>${transaction.odometer_reading.toLocaleString()}</td>
                                                        <td>${transaction.distance_run} km</td>
                                                        <td class="${mileageClass}">${transaction.mileage_kmpl.toFixed(2)} KMPL</td>
                                                        <td><span class="badge bg-${statusClass}">${transaction.performanceStatus?.label || 'Good'}</span></td>
                                                    </tr>
                                                `;
                                            }).join('')}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                
                container.innerHTML += sectionHtml;
            });
        }

        // Helper function to group transactions by vehicle
        function groupTransactionsByVehicle(data) {
            const grouped = {};
            
            data.forEach(transaction => {
                const vehicleNumber = transaction.vehicle_number;
                
                if (!grouped[vehicleNumber]) {
                    grouped[vehicleNumber] = {
                        vehicle_type: transaction.vehicle_type,
                        transactions: []
                    };
                }
                
                grouped[vehicleNumber].transactions.push(transaction);
            });
            
            // Sort transactions within each vehicle by date (newest first)
            Object.keys(grouped).forEach(vehicleNumber => {
                grouped[vehicleNumber].transactions.sort((a, b) => 
                    new Date(b.transaction_date) - new Date(a.transaction_date)
                );
            });
            
            return grouped;
        }

      // Helper function to format Indian number plate
        function formatIndianNumberPlate(vehicleNumber) {
            if (vehicleNumber && vehicleNumber.length >= 8) {
                const state = vehicleNumber.substring(0, 2);
                const district = vehicleNumber.substring(2, 4);
                
                // Check if it's new format (2 letters) or old format (1 letter)
                // Look for where the numbers start from the end
                const lastFourDigits = vehicleNumber.slice(-4);
                const seriesPart = vehicleNumber.substring(4, vehicleNumber.length - 4);
                
                return `${state} ${district} ${seriesPart} ${lastFourDigits}`;
            }
            return vehicleNumber;
        }

        // Function to toggle vehicle section expansion
        function toggleVehicleSection(vehicleNumber) {
            const element = document.getElementById(`section-${vehicleNumber}`);
            const icon = document.getElementById(`icon-${vehicleNumber}`);
            const header = icon.closest('.vehicle-header');
            
            if (element.classList.contains('show')) {
                element.classList.remove('show');
                header.classList.add('collapsed');
            } else {
                element.classList.add('show');
                header.classList.remove('collapsed');
            }
        }
        // Initialize dashboard on page load
        document.addEventListener('DOMContentLoaded', function() {
             console.log('Page loaded, initial detailedData:', detailedData);
             populateDetailedReport(detailedData);
            
        });